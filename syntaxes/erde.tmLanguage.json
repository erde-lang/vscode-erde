{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Erde",
  "scopeName": "source.erde",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#constants" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#goto" },
    { "include": "#dot_index" },
    { "include": "#functions" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.erde",
          "match": "^#!.*$"
        },
        {
          "name": "comment.line.erde",
          "match": "--(?!\\[=*\\[).*$"
        },
        {
          "name": "comment.block.erde",
          "begin": "--\\[(=*)\\[",
          "end": "\\]\\1\\]"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.erde",
          "match": "\\b(break|continue|do|else|elseif|for|function|goto|if|in|repeat|return|until|while)\\b"
        },
        {
          "name": "storage.modifier.erde",
          "match": "\\b(global|local|module)\\b"
        },
        {
          "name": "variable.language.self.erde",
          "match": "\\bself\\b"
        },
        {
          "name": "support.class.stdlib.erde",
          "match": "\\b(bit32|coroutine|debug|io|math|os|package|string|table|utf8)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.other.erde",
          "match": "[A-Z_][A-Z0-9_]*"
        },
        {
          "name": "constant.language.nil.erde",
          "match": "\\bnil\\b"
        },
        {
          "name": "constant.language.boolean.erde",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.varargs.erde",
          "match": "(?<!\\.)\\.{3}(?!\\.)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.erde",
          "match": "[!~|&<>=+*/%^]"
        },
        {
          "name": "keyword.operator.length.erde",
          "match": "#(?!!)"
        },
        {
          "name": "keyword.operator.minus.erde",
          "match": "(?<!-)-(?!-)"
        },
        {
          "name": "keyword.operator.concat.erde",
          "match": "(?<!\\.)\\.{2}(?!\\.)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.erde",
          "match": "0[xX]\\h*\\.?\\h+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.decimal.erde",
          "match": "\\d*\\.?\\d+([eE][+-]?\\d+)?"
        }
      ]
    },
    "escape_characters": {
      "patterns": [
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\[\\\\abfnrtvz\"'\\n]"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\x\\h{2}"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\\\d{1,3}"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\u\\{\\h+\\}"
        },
        {
          "name": "invalid.illegal.erde",
          "match": "\\\\."
        }
      ]
    },
    "string_interpolation": {
      "patterns": [
        {
          "name": "string.quoted.content.erde",
          "match": "\\\\[{}]"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [{ "include": "$self" }]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.erde",
          "begin": "'",
          "end": "'",
          "patterns": [{ "include": "#escape_characters" }]
        },
        {
          "name": "string.quoted.double.erde",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "include": "#string_interpolation" },
            { "include": "#escape_characters" }
          ]
        },
        {
          "name": "string.quoted.other.erde",
          "begin": "(?<!--)\\[(=*)\\[",
          "end": "\\]\\1\\][ \\t]*",
          "patterns": [
            { "include": "#string_interpolation" },
            { "include": "#escape_characters" }
          ]
        }
      ]
    },
    "goto": {
      "patterns": [
        {
          "name": "variable.other.goto.jump.erde",
          "match": "(?<=\\bgoto\\s*\\b)[a-zA-Z_]\\w*"
        },
        {
          "name": "variable.other.goto.label.erde",
          "match": "::[a-zA-Z_]\\w*::"
        }
      ]
    },
    "dot_index": {
      "name": "variable.other.erde",
      "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_]\\w*)"
    },
    "functions": {
      "name": "entity.name.function.erde",
      "match": "\\b[a-zA-Z_]\\w*\\b(?=\\()"
    }
  }
}
