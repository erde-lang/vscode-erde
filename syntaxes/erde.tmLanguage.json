{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Erde",
  "scopeName": "source.erde",
  "patterns": [
    { "include": "#comments" },
    { "include": "#expression" },
    { "include": "#functions" },
    { "include": "#keywords" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.erde",
          "begin": "--\\[(=*)\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.erde" }
          },
          "end": "\\]\\1\\]",
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.erde" }
          }
        },
        {
          "name": "comment.line.double-dash.erde",
          "begin": "--",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.erde" }
          },
          "end": "\\n"
        },
        {
          "name": "comment.line.shebang.erde",
          "match": "\\A(#!).*$\\n?",
          "captures": {
            "1": { "name": "punctuation.definition.comment.erde" }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "\\b(nil|true|false)\\b"
        },
        {
          "name": "constant.numeric.float.erde",
          "match": "\\d*\\.\\d+([eE][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.float.hexadecimal.erde",
          "match": "0[xX][0-9A-Fa-f]*\\.[0-9A-Fa-f]+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.erde",
          "match": "0[xX][0-9A-Fa-f]+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.integer.erde",
          "match": "\\d+([eE][+-]?\\d+)?"
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#constants" },
        { "include": "#operator" },
        { "include": "#strings" }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.erde",
          "begin": "\\b(function)\\s+((?:[a-zA-Z_][a-zA-Z0-9_]*\\.)*(?:[a-zA-Z_][a-zA-Z0-9_]*:)?[a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "storage.type.erde" },
            "2": { "name": "entity.name.function.erde" },
            "3": { "name": "punctuation.definition.parameters.begin.erde" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.definition.parameters.end.erde" }
          },
          "patterns": [
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            },
            {
              "name": "punctuation.separator.arguments.erde",
              "match": ","
            },
            { "include": "#expression" }
          ]
        },
        {
          "name": "meta.function.erde",
          "begin": "(\\()(?=.*\\)\\s*[-=]>)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.parameters.begin.erde" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.definition.parameters.end.erde" }
          },
          "patterns": [
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            },
            {
              "name": "punctuation.separator.arguments.erde",
              "match": ","
            },
            { "include": "#expression" }
          ]
        },
        {
          "name": "variable.parameter.erde",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*[-=]>)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.modifier.erde",
          "match": "\\b(local|module|global)\\b"
        },
        {
          "name": "keyword.control.erde",
          "match": "\\b(do|if|elseif|else|for|in|break|continue|while|repeat|until|try|catch|return)\\b"
        }
      ]
    },
    "operator": {
      "name": "keyword.operator.erde",
      "match": "[#~|&<>=+*/%^:.?-]"
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.erde",
          "begin": "'",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "'",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.double.erde",
          "begin": "\"",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "\"",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.other.multiline.erde",
          "begin": "(?<!--)\\[(=*)\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "\\]\\1\\][ \\t]*",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        }
      ]
    },
    "string_embedded": {
      "patterns": [
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\[abfnrtv\\\\\"'\\n{}]"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\z[\\n\\t ]*"
        },
        {
          "name": "constant.character.escape.byte.erde",
          "match": "\\\\\\d{1,3}"
        },
        {
          "name": "constant.character.escape.byte.erde",
          "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]"
        },
        {
          "name": "constant.character.escape.unicode.erde",
          "match": "\\\\u\\{[0-9A-Fa-f]+\\}"
        },
        {
          "name": "invalid.illegal.character.escape.erde",
          "match": "\\\\."
        },
        {
          "name": "source.erde.embedded.source",
          "begin": "\\{",
          "captures": {
            "0": { "name": "punctuation.section.embedded.erde" }
          },
          "end": "\\}",
          "patterns": [{ "include": "#expression" }]
        }
      ]
    }
  }
}
