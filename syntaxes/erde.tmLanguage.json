{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Erde",
  "scopeName": "source.erde",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#declaration" },
    { "include": "#expression" },
    {
      "name": "meta.function.erde",
      "begin": "\\b(function)\\s+((?:[a-zA-Z_]\\w*\\.)*(?:[a-zA-Z_]\\w*:)?[a-zA-Z_]\\w*)(\\()",
      "beginCaptures": {
        "1": { "name": "storage.type.erde" },
        "2": { "name": "entity.name.function.erde" },
        "3": { "name": "punctuation.definition.parameters.begin.erde" }
      },
      "end": "\\)",
      "endCaptures": {
        "0": { "name": "punctuation.definition.parameters.end.erde" }
      },
      "patterns": [
        {
          "name": "variable.parameter.erde",
          "match": "[a-zA-Z_]\\w*"
        },
        {
          "name": "punctuation.separator.arguments.erde",
          "match": ","
        },
        { "include": "#expression" }
      ]
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.shebang.erde",
          "match": "^#!.*$"
        },
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": { "name": "punctuation.whitespace.comment.leading.erde" }
          },
          "end": "(?!\\G)((?!^)[ \\t]+\\n)?",
          "endCaptures": {
            "1": { "name": "punctuation.whitespace.comment.trailing.erde" }
          },
          "patterns": [
            {
              "name": "comment.block.erde",
              "begin": "--\\[(=*)\\[",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.begin.erde"
                }
              },
              "end": "\\]\\1\\]",
              "endCaptures": {
                "0": { "name": "punctuation.definition.comment.end.erde" }
              }
            },
            {
              "name": "comment.line.erde",
              "begin": "--",
              "beginCaptures": {
                "0": { "name": "punctuation.definition.comment.erde" }
              },
              "end": "\\n"
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION)\\b|(?<![.])\\.{3}(?!\\.)"
        },
        {
          "name": "variable.language.erde",
          "match": "(?<![^.]\\.|:)(self|\\$)"
        },
        {
          "name": "constant.numeric.float.erde",
          "match": "\\d*\\.\\d+([eE][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.float.hexadecimal.erde",
          "match": "0[xX]\\h*\\.\\h+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.erde",
          "match": "0[xX]\\h+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.integer.erde",
          "match": "\\d+([eE][+-]?\\d+)?"
        },
        {
          "name": "support.class.library.erde",
          "match": "(?<![.:])\\b(coroutine|debug|io|math|os|package|string|table)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:])\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bcoroutine\\.)(?<=\\bcoroutine\\.)(?:create|resume|running|status|wrap|yield)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bdebug\\.)(?<=\\bdebug\\.)(?:debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bio\\.)(?<=\\bio\\.)(?:close|flush|input|lines|open|output|popen|read|tmpfile|type|write)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bmath\\.)(?<=\\bmath\\.)(?:abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bos\\.)(?<=\\bos\\.)(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bpackage\\.)(?<=\\bpackage\\.)(?:cpath|loaded|loadlib|path|preload|seeall)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\bstring\\.)(?<=\\bstring\\.)(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)\\b"
        },
        {
          "name": "support.function.library.erde",
          "match": "(?<![.:]\\btable\\.)(?<=\\btable\\.)(?:concat|insert|maxn|remove|sort)\\b"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "name": "meta.declaration",
          "begin": "(?<=(?:^|\\s+)(?:local|global|module))\\s+(?!function)",
          "end": "=|\\n",
          "patterns": [
            { "include": "#destructure_array" },
            { "include": "#destructure_map" },
            {
              "name": "variable.other.declaration.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            {
              "name": "punctuation.separator.declaration.erde",
              "match": ","
            }
          ]
        }
      ]
    },
    "destructure_array": {
      "name": "meta.destructure.array",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        { "include": "#expression" },
        {
          "name": "variable.other.declaration.erde",
          "match": "[a-zA-Z_]\\w*"
        },
        {
          "name": "punctuation.separator.declaration.erde",
          "match": ","
        }
      ]
    },
    "destructure_map": {
      "name": "meta.destructure.map",
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#expression" },
        {
          "name": "variable.other.declaration.erde",
          "match": "[a-zA-Z_]\\w*"
        },
        {
          "name": "punctuation.separator.declaration.erde",
          "match": ","
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#arrow_function" },
        { "include": "#constants" },
        { "include": "#operator" },
        { "include": "#strings" },
        {
          "name": "entity.name.function.call.erde",
          "match": "\\b[a-zA-Z_]\\w*\\b(?=\\??\\()"
        },
        {
          "name": "variable.other.property.erde",
          "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_]\\w*)"
        },
        {
          "name": "variable.other.self.property.erde",
          "match": "(?<![^.]\\.|:)(?<=\\$)[a-zA-Z_]\\w*"
        }
      ]
    },
    "arrow_function": {
      "patterns": [
        {
          "name": "variable.parameter.erde",
          "match": "[a-zA-Z_]\\w*(?=\\s*[-=]>)"
        },
        {
          "name": "meta.function.arrow.parameters.destructure_map.erde",
          "begin": "(\\[)(?=.*\\]\\s*[-=]>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.destructure_array.begin.erde"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.destructure_array.end.erde"
            }
          },
          "patterns": [
            { "include": "#expression" },
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            {
              "name": "punctuation.separator.declaration.erde",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.function.arrow.parameters.destructure_map.erde",
          "begin": "(\\{)(?=.*\\}\\s*[-=]>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.destructure_map.begin.erde"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.destructure_map.end.erde"
            }
          },
          "patterns": [
            { "include": "#expression" },
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            {
              "name": "punctuation.separator.declaration.erde",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.function.arrow.erde",
          "begin": "(\\()(?=.*\\)\\s*[-=]>)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.parameters.begin.erde" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.definition.parameters.end.erde" }
          },
          "patterns": [
            { "include": "#expression" },
            { "include": "#destructure_array" },
            { "include": "#destructure_map" },
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            {
              "name": "punctuation.separator.arguments.erde",
              "match": ","
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.modifier.erde",
          "match": "(?<![.:])\\b(global|local|module)\\b"
        },
        {
          "name": "keyword.control.erde",
          "match": "(?<![.:])\\b(break|catch|continue|do|else|elseif|goto|for|if|in|repeat|return|try|until|while)\\b"
        }
      ]
    },
    "operator": {
      "name": "keyword.operator.erde",
      "match": "[!#~|&<>=+*/%^-]|\\.{2,3}"
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.erde",
          "begin": "'",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "'",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.double.erde",
          "begin": "\"",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "\"",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.other.multiline.erde",
          "begin": "(?<!--)\\[(=*)\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.erde" }
          },
          "end": "\\]\\1\\][ \\t]*",
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.erde" }
          },
          "patterns": [{ "include": "#string_embedded" }]
        }
      ]
    },
    "string_embedded": {
      "patterns": [
        {
          "name": "string",
          "match": "\\\\[{}]"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\[abfnrtvz\\\\\"'\\n]"
        },
        {
          "name": "constant.character.escape.byte.erde",
          "match": "\\\\\\d{1,3}"
        },
        {
          "name": "constant.character.escape.byte.erde",
          "match": "\\\\x\\h{2}"
        },
        {
          "name": "constant.character.escape.unicode.erde",
          "match": "\\\\u\\{\\h+\\}"
        },
        {
          "name": "invalid.illegal.character.escape.erde",
          "match": "\\\\."
        },
        {
          "name": "meta.embedded.expression meta.template.expression",
          "begin": "\\{",
          "captures": {
            "0": { "name": "punctuation.section.embedded.erde" }
          },
          "end": "\\}",
          "patterns": [{ "include": "#expression" }]
        }
      ]
    }
  }
}
