{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Erde",
  "scopeName": "source.erde",
  "patterns": [
    { "include": "#comment" },
    { "include": "#keyword" },
    { "include": "#statement" },
    { "include": "#expression" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.line.erde",
          "match": "^#!.*$"
        },
        {
          "name": "comment.line.erde",
          "match": "--(?!\\[=*\\[).*$"
        },
        {
          "name": "comment.block.erde",
          "begin": "--\\[(=*)\\[$",
          "end": "\\]\\1\\]"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "storage.type.erde",
          "match": "(?<![.:])\\bfunction\\b"
        },
        {
          "name": "storage.modifier.erde",
          "match": "(?<![.:])\\b(global|local|module)\\b"
        },
        {
          "name": "keyword.control.erde",
          "match": "(?<![.:])\\b(break|catch|continue|do|else|elseif|goto|for|if|in|repeat|return|try|until|while)\\b"
        }
      ]
    },
    "operator": {
      "name": "keyword.operator.erde",
      "match": "[!#~|&<>=+*/%^-]|\\.{2,3}"
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.erde",
          "match": "0[xX]\\h*\\.?\\h+([pP][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.erde",
          "match": "\\d*\\.?\\d+([eE][+-]?\\d+)?"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.single.erde",
          "begin": "'",
          "end": "'",
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.double.erde",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "include": "#string_embedded" }]
        },
        {
          "name": "string.quoted.other.erde",
          "begin": "(?<!--)\\[(=*)\\[",
          "end": "\\]\\1\\][ \\t]*",
          "patterns": [{ "include": "#string_embedded" }]
        }
      ]
    },
    "string_embedded": {
      "patterns": [
        {
          "name": "string.interpolated.erde",
          "match": "\\\\[{}]"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\[abfnrtvz\\\\\"'\\n]"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\\\d{1,3}"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\x\\h{2}"
        },
        {
          "name": "constant.character.escape.erde",
          "match": "\\\\u\\{\\h+\\}"
        },
        {
          "name": "invalid.illegal.erde",
          "match": "\\\\."
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [{ "include": "#expression" }]
        }
      ]
    },
    "stdlib": {
      "patterns": [
        {
          "name": "support.class.erde",
          "match": "(?<![.:])\\b(coroutine|debug|io|math|os|package|string|table)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:])\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bcoroutine\\.)(?<=\\bcoroutine\\.)(?:create|resume|running|status|wrap|yield)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bdebug\\.)(?<=\\bdebug\\.)(?:debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bio\\.)(?<=\\bio\\.)(?:close|flush|input|lines|open|output|popen|read|tmpfile|type|write)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bmath\\.)(?<=\\bmath\\.)(?:abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bos\\.)(?<=\\bos\\.)(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bpackage\\.)(?<=\\bpackage\\.)(?:cpath|loaded|loadlib|path|preload|seeall)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\bstring\\.)(?<=\\bstring\\.)(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)\\b"
        },
        {
          "name": "support.function.erde",
          "match": "(?<![.:]\\btable\\.)(?<=\\btable\\.)(?:concat|insert|maxn|remove|sort)\\b"
        }
      ]
    },
    "arrow_function": {
      "patterns": [
        {
          "name": "variable.parameter.erde",
          "match": "[a-zA-Z_]\\w*(?=\\s*[-=]>)"
        },
        {
          "begin": "\\[(?=.*\\]\\s*[-=]>)",
          "end": "\\]",
          "patterns": [
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            { "include": "#expression" }
          ]
        },
        {
          "begin": "\\{(?=.*\\}\\s*[-=]>)",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            { "include": "#expression" }
          ]
        },
        {
          "begin": "\\((?=.*\\)\\s*[-=]>)",
          "end": "\\)",
          "patterns": [
            { "include": "#destructure_array" },
            { "include": "#destructure_map" },
            {
              "name": "variable.parameter.erde",
              "match": "[a-zA-Z_]\\w*"
            },
            { "include": "#expression" }
          ]
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#operator" },
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#stdlib" },
        { "include": "#arrow_function" },
        {
          "name": "constant.language.erde",
          "match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION)\\b|(?<!\\.)\\.{3}(?!\\.)"
        },
        {
          "name": "variable.language.erde",
          "match": "(?<![^.]\\.|:)self"
        },
        {
          "name": "entity.name.function.erde",
          "match": "\\b[a-zA-Z_]\\w*\\b(?=\\()"
        },
        {
          "name": "variable.other.erde",
          "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_]\\w*)"
        }
      ]
    },
    "var": {
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "begin": "=",
              "beginCaptures": { "0": { "name": "keyword.operator.erde" } },
              "end": "(?=[,}])",
              "patterns": [{ "include": "#expression" }]
            },
            {
              "begin": "[a-zA-Z_]\\w*(?=\\s*:)",
              "beginCaptures": { "0": { "name": "variable.other.erde" } },
              "end": "(?<:\\s*)[a-zA-Z_]\\w*",
              "endCaptures": { "0": { "name": "variable.other.erde" } }
            },
            { "name": "variable.other.erde", "match": "[a-zA-Z_]\\w*" }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "begin": "=",
              "beginCaptures": { "0": { "name": "keyword.operator.erde" } },
              "end": "(?=[,\\]])",
              "patterns": [{ "include": "#expression" }]
            },
            { "name": "variable.other.erde", "match": "[a-zA-Z_]\\w*" }
          ]
        },
        { "name": "variable.other.erde", "match": "[a-zA-Z_]\\w*" }
      ]
    },
    "statement": {
      "patterns": [
        {
          "begin": "(?<=(?:^|\\s+)(?:local|global|module)\\s+)(?!function)",
          "end": "(?<=([a-zA-Z_]\\w*)|\\}|\\])(?!\\s*,)",
          "patterns": [{ "include": "#var" }]
        },
        {
          "begin": "(?<=(?:^|\\s+)function\\s+(?:[a-zA-Z_]\\w*\\.)*(?:[a-zA-Z_]\\w*:)?)([a-zA-Z_]\\w*)\\(",
          "beginCaptures": { "1": { "name": "entity.name.function.erde" } },
          "end": "\\)",
          "patterns": [{ "include": "#var" }, { "include": "#expression" }]
        }
      ]
    }
  }
}
